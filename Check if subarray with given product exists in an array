Given an array of both positive and negative integers and a number K., The task is to check if any subarray with product K is present in the array or not.

Examples: 

Input: arr[] = {-2, -1, 3, -4, 5}, K = 2
Output: YES

Input: arr[] = {3, -1, -1, -1, 5}, K = 3
Output: YES


Approch:-o(n)
Auxiliary Space: O(1)
we use the two-pointer technique (sliding window), but adapt it to handle products.

Here is a way to approach it:

Initialize two pointers, start and end.
Use a variable product to keep track of the product of elements in the current window.
Expand the window by moving end to the right and update the product.
If the product exceeds k, move start to the right until the product is less than or equal to k.
Check if the product matches k.
Below is the implementation of above idea.



//code--

#include <iostream>
using namespace std;

bool hasSubarrayWithProduct(int *arr, int n, int k)
{
  int start = 0;
  int product = 1;

  for (int end = 0; end < n; ++end)
  {
    product *= arr[end];

    // If the product becomes zero and k is not zero, move the start to skip zero
    while (start <= end && product == 0 && k != 0)
    {
      start++;
      product = 1;
      for (int i = start; i <= end; ++i)
      {
        product *= arr[i];
      }

      cout << product << endl;
    }

    while (start <= end && product != 0 && abs(product) > abs(k))
    {
      product /= arr[start];
      start++;
    }

    if (product == k)
    {
      return true;
    }
  }

  return false;
}

int main()
{
  int arr[] = {1, 2, 8, 8, 0, 2, -5, -4};
  int product = -10;
  int n = sizeof(arr) / sizeof(arr[0]);

  if (hasSubarrayWithProduct(arr, n, product))
  {
    cout << "YES" << endl;
  }
  else
  {
    cout << "NO" << endl;
  }

  return 0;
}
