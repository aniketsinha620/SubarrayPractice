Given an array of 0s and 1s. Find the length of the largest subarray with equal number of 0s and 1s.

Example 1:

Input:
N = 4
A[] = {0,1,0,1}
Output: 4
Explanation: The array from index [0...3]
contains equal number of 0's and 1's.
Thus maximum length of subarray having
equal number of 0's and 1's is 4.

Question:-https://www.geeksforgeeks.org/problems/largest-subarray-of-0s-and-1s/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card


approch:-o(n)

-> Replace 0s with -1, so the problem becomes finding the longest subarray with a sum of 0 (the question become find the length of subarray with sum equal to 0).
-> Use a hash map (unordered_map) to store the first occurrence of each cumulative sum.
-> If the same cumulative sum is found again, it means the subarray between the two indices has an equal number of 0s and 1s (because the cumulative sum has remained the same).



int maxLen(int arr[], int n)
    {
       
       int sum=0,len=0;
       unordered_map<int,int>st;
       
       for(int i=0;i<n;i++){
           
           sum+=((arr[i]==0)?(-1):(1));
           
           if(sum==0)
           len=max(len,i+1);
           
           if(st.find(sum)!=st.end()){
               len=max(len,i-st[sum]);
           }
           else{
               st[sum]=i;
           }
       }
       
       return len;
    }
