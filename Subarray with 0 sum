Given an array of integers. Find if there is a subarray (of size at-least one) with 0 sum. You just need to return true/false depending upon whether there is a subarray present with 0-sum or not. Printing will be taken care by the driver code.

Example 1:

Input:
n = 5
arr = {4,2,-3,1,6}
Output: 
Yes
Explanation: 
2, -3, 1 is the subarray with sum 0.



Approch:-o(n)
-> if the cumulative sum of elements up to an index repeats, it means the subarray between the two indices where the sum is the same has a sum of 0.
-> If at any point the cumulative sum becomes 0, it also indicates the presence of a subarray with sum 0.

#include <unordered_set>
using namespace std;

bool subArrayExists(int arr[], int n) {
    unordered_set<int> set;
    int sum = 0;
    
    for (int i = 0; i < n; i++) {
        sum += arr[i];
        
        // If sum becomes 0 or it has already been seen
        if (sum == 0 || set.find(sum) != set.end()) {
            return true;
        }
        
        // Insert the sum into the set
        set.insert(sum);
    }
    
    return false;
}
